FROM ubuntu:22.04 AS fetch_stage

RUN     apt-get update          \
   &&  apt-get upgrade -y      \
   &&  apt-get install -y      \
           git                 \
           wget                \
           xz-utils

WORKDIR /sources

# tina linux is based on linux 5.4
# RUN     git clone https://github.com/nucleus-labs/Tina-Linux linux-tina
RUN     git clone https://go.googlesource.com/go goroot                                 \
    &&  cd goroot                                                                       \
    &&  git checkout go1.20.5
RUN     git clone https://github.com/bluenviron/mediamtx                                \
    &&  cd mediamtx                                                                     \
    &&  git checkout 91ada9bf07487371f2c0189ab73201ddbaef468e



FROM ubuntu:22.04 AS build_stage_init

ENV     DEBIAN_FRONTEND=noninteractive
RUN     apt-get update          \
    &&  apt-get upgrade -y      \
    &&  apt-get install -y      \
            build-essential     \
            subversion          \
            git-core            \
            libncurses5-dev     \
            zlib1g-dev          \
            gawk                \
            flex                \
            quilt               \
            libssl-dev          \
            xsltproc            \
            libxml-parser-perl  \
            mercurial           \
            bzr                 \
            ecj                 \
            cvs                 \
            unzip               \
            lib32z1             \
            lib32z1-dev         \
            lib32stdc++6        \
            libstdc++6          \
            libmpc-dev          \
            libgmp-dev          \
            wget                \
            python2             \
            file                \
            rsync               \
            nano                \
            openssl             \
            bc                  \
            binwalk             \
            xxd                 \
            busybox             \
            autoconf            \
            automake            \
            autopoint           \
            libtool             \
    &&  update-ca-certificates

FROM build_stage_init AS build_stage_init_tina

# ENV PATH=$PATH:/usr/local/bin/m4

COPY                     ./linux-tina        /builds/linux-tina
# COPY --from=FETCH_STAGE  /sources/linux      /builds/linux-tina

WORKDIR /builds/linux-tina

# RUN     git submodule update --init --recursive

COPY ./deps/build/tina/prebuilt.tar.gz                                          /builds/linux-tina/prebuilt.tar.gz
COPY ./deps/build/tina/dl.tar                                                   /builds/linux-tina/dl.tar
COPY ./deps/build/tina/riscv64-linux-x86_64-20200528.tar.xz                     /builds/linux-tina/lichee/brandy-2.0/tools/toolchain/riscv64-linux-x86_64-20200528.tar.xz
# COPY ./deps/build/tina/gcc-linaro-7.2.1-2017.11-x86_64_arm-linux-gnueabi.tar.xz /builds/linux-tina/lichee/brandy-2.0/tools/toolchain/gcc-linaro-7.2.1-2017.11-x86_64_arm-linux-gnueabi.tar.xz

RUN     tar xzvf prebuilt.tar.gz    \
    &&  tar xvf dl.tar              \
    &&  rm prebuilt.tar.gz          \
    &&  rm dl.tar

# ENV PATH="$PATH:/home/iris/x-tools/riscv64-nucleus_labs-linux-gnu/bin"
ENV CROSS_COMPILE=riscv64-unknown-linux-gnu-
# ENV LDFLAGS=--static

RUN     mkdir -p /artifacts/tina/logs
ARG     JOBS=1
ADD     deps/build/tina/build-tina.sh   /builds/linux-tina/build.sh

FROM build_stage_init_tina as build_stage_tina

RUN     chmod +x build.sh                   \
    &&  ./build.sh 2>&1 | tee /artifacts/tina/logs/build.tina

ENV STAGING_DIR=/builds/linux-tina/out/d1-mq_pro/staging_dir/toolchain
ENV PATH=${PATH}:/builds/linux-tina/out/d1-mq_pro/staging_dir/toolchain/bin


# FROM build_stage_tina AS build_stage_mediamtx
FROM build_stage_tina AS build_stage

ADD deps/build/mediamtx/go1.20.5.linux-amd64.tar.gz /builds

ENV GOOS=linux
ENV GOARCH=riscv64
ENV CGO_ENABLED=0
ENV CC=riscv64-unknown-linux-gnu-gcc
ENV GOROOT_BOOTSTRAP=/builds/go

COPY    --from=FETCH_STAGE /sources/goroot     /builds/goroot

WORKDIR /builds/goroot/src

RUN     ./make.bash | tee /builds/goroot/build.go   \
    &&  rm -rf /builds/go

RUN     mkdir -p /artifacts/go                                          \
    &&  cp /builds/goroot/bin/linux_riscv64/go /artifacts/go/go         \
    &&  cp /builds/goroot/bin/linux_riscv64/gofmt /artifacts/go/gofmt

ENV PATH=${PATH}:/builds/goroot/bin

COPY    --from=FETCH_STAGE  /sources/mediamtx   /builds/mediamtx

WORKDIR /builds/mediamtx

RUN     go build .

RUN     cp mediamtx /artifacts/mediamtx


FROM build_stage AS disk_stage

WORKDIR /builds/linux-tina

ENV ROOTFS_DIR=/builds/linux-tina/out/d1-mq_pro/compile_dir/target/rootfs

RUN     cp /artifacts/mediamtx      ${ROOTFS_DIR}/bin/mediamtx
ADD     deps/rootfs/mediamtx.yml    ${ROOTFS_DIR}/etc/mediamtx.yml

# TODO: copy init script

RUN     /bin/bash -c "                                  \
                source build/envsetup.sh                \
            &&  lunch d1_mq_pro-tina                    \
            &&  mkrootfs_squashfs4                      \
            &&  mboot                                   \
            &&  pack                                    \
        " 2>&1 | tee /artifacts/tina/logs/build.mboot

RUN     mkdir -p /artifacts/tina/u-boot/ /artifacts/tina/dts /artifacts/tina/out
RUN     cp /builds/linux-tina/lichee/linux-5.4/arch/riscv/boot/dts/sunxi/*?.dt*? /artifacts/tina/dts/
# RUN     cp /builds/linux-tina/out/d1-mq_pro/*?.img /artifacts/tina/out/ \
#     &&  cp /builds/linux-tina/out/d1-mq_pro/*?.bin /artifacts/tina/out/ \
#     &&  cp /builds/linux-tina/out/d1-mq_pro/d1-mq_pro-uImage /artifacts/tina/out/d1-mq_pro-uImage
# RUN     cp /builds/linux-tina/lichee/brandy-2.0/u-boot-2018/u-boot*? /artifacts/tina/u-boot/


FROM ubuntu:22.04 AS run_stage

WORKDIR /doorbellian

RUN     apt-get update              \
    &&  apt-get install -y          \
            qemu-system-riscv64     \
            v4l-utils               \
            usbutils


ADD deps/run/doorbellian-qemu.sh doorbellian-qemu.sh
RUN chmod +x doorbellian-qemu.sh

COPY --from=disk_stage /artifacts                                          /artifacts

# CMD ["/doorbellian/doorbellian-qemu.sh"]
CMD ["/bin/bash"]
