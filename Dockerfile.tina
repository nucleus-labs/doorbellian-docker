FROM ubuntu:22.04 AS fetch_stage

RUN     apt-get update          \
   &&  apt-get upgrade -y      \
   &&  apt-get install -y      \
           git                 \
           wget                \
           xz-utils

WORKDIR /sources

# tina linux is based on linux 5.4
# RUN     git clone https://github.com/nucleus-labs/Tina-Linux linux-tina
RUN     git clone https://go.googlesource.com/go goroot                                 \
    &&  cd goroot                                                                       \
    &&  git checkout go1.20.5
RUN     git clone https://github.com/bluenviron/mediamtx                                \
    &&  cd mediamtx                                                                     \
    &&  git checkout 91ada9bf07487371f2c0189ab73201ddbaef468e
RUN     git clone --depth=1 https://github.com/timothytylee/libgsm
RUN     git clone --depth=1 -b release/6.0 https://github.com/nucleus-labs/ffmpeg
# RUN     git clone --depth=1 https://github.com/VFR-maniac/opencore-amr
RUN     wget https://cytranet.dl.sourceforge.net/project/opencore-amr/opencore-amr/opencore-amr-0.1.6.tar.gz    \
    &&  tar xvf opencore-amr-0.1.6.tar.gz                                                                       \
    &&  rm opencore-amr-0.1.6.tar.gz



FROM ubuntu:22.04 AS build_stage_init

ENV     DEBIAN_FRONTEND=noninteractive
RUN     apt-get update          \
    &&  apt-get upgrade -y      \
    &&  apt-get install -y      \
            build-essential     \
            subversion          \
            git-core            \
            libncurses5-dev     \
            zlib1g-dev          \
            gawk                \
            flex                \
            quilt               \
            libssl-dev          \
            xsltproc            \
            libxml-parser-perl  \
            mercurial           \
            bzr                 \
            ecj                 \
            cvs                 \
            unzip               \
            lib32z1             \
            lib32z1-dev         \
            lib32stdc++6        \
            libstdc++6          \
            libmpc-dev          \
            libgmp-dev          \
            wget                \
            python2             \
            file                \
            rsync               \
            nano                \
            openssl             \
            bc                  \
            binwalk             \
            xxd                 \
            busybox             \
            autoconf            \
            automake            \
            autopoint           \
            libtool             \
            # help2man            \
            # texinfo             \
            # gperf
    &&  update-ca-certificates

ARG SIGN_NAME
ARG SIGN_EMAIL

FROM build_stage_init AS build_stage_tina

# ENV PATH=$PATH:/usr/local/bin/m4

COPY                     ./linux-tina        /builds/linux-tina
# COPY --from=FETCH_STAGE  /sources/linux      /builds/linux-tina

WORKDIR /builds/linux-tina

# RUN     git submodule update --init --recursive

COPY ./deps/build/tina/prebuilt.tar.gz                                          /builds/linux-tina/prebuilt.tar.gz
COPY ./deps/build/tina/dl.tar                                                   /builds/linux-tina/dl.tar
COPY ./deps/build/tina/riscv64-linux-x86_64-20200528.tar.xz                     /builds/linux-tina/lichee/brandy-2.0/tools/toolchain/riscv64-linux-x86_64-20200528.tar.xz
COPY ./deps/build/tina/gcc-linaro-7.2.1-2017.11-x86_64_arm-linux-gnueabi.tar.xz /builds/linux-tina/lichee/brandy-2.0/tools/toolchain/gcc-linaro-7.2.1-2017.11-x86_64_arm-linux-gnueabi.tar.xz

RUN     tar xzvf prebuilt.tar.gz    \
    &&  tar xvf dl.tar              \
    &&  rm prebuilt.tar.gz          \
    &&  rm dl.tar

# ENV PATH="$PATH:/home/iris/x-tools/riscv64-nucleus_labs-linux-gnu/bin"
ENV CROSS_COMPILE=riscv64-unknown-linux-gnu-
# ENV LDFLAGS=--static

RUN     mkdir -p /artifacts/tina/logs

ARG JOBS=1

ADD     deps/build/tina/build-tina.sh   /builds/linux-tina/build.sh
RUN     chmod +x build.sh                   \
    &&  ./build.sh 2>&1 | tee /artifacts/tina/logs/build.tina

ENV STAGING_DIR=/builds/linux-tina/out/d1-mq_pro/staging_dir/toolchain
ENV PATH=${PATH}:/builds/linux-tina/out/d1-mq_pro/staging_dir/toolchain/bin


FROM build_stage_tina AS build_stage_mediamtx

ADD deps/build/mediamtx/go1.20.5.linux-amd64.tar.gz /builds

ENV GOOS=linux
ENV GOARCH=riscv64
ENV CGO_ENABLED=0
ENV CC=riscv64-unknown-linux-gnu-gcc
ENV GOROOT_BOOTSTRAP=/builds/go

COPY    --from=FETCH_STAGE /sources/goroot     /builds/goroot

WORKDIR /builds/goroot/src

RUN     ./make.bash | tee /builds/goroot/build.go   \
    &&  rm -rf /builds/go

RUN     mkdir -p /artifacts/go                                          \
    &&  cp /builds/goroot/bin/linux_riscv64/go /artifacts/go/go         \
    &&  cp /builds/goroot/bin/linux_riscv64/gofmt /artifacts/go/gofmt

ENV PATH=${PATH}:/builds/goroot/bin

COPY    --from=FETCH_STAGE  /sources/mediamtx   /builds/mediamtx

WORKDIR /builds/mediamtx

RUN     go build .

RUN     cp mediamtx /artifacts/mediamtx

FROM build_stage_mediamtx AS build_stage_ffdeps

COPY    --from=FETCH_STAGE  /sources/ffmpeg     /builds/ffmpeg
ENV CCPREFIX="riscv64-unknown-linux-gnu-"
ENV CC=${CCPREFIX}gcc
RUN mkdir -p /builds/ffmpeg/deps/lib /builds/ffmpeg/deps/include
ENV PATH=${PATH}:/builds/ffmpeg/deps

COPY    --from=fetch_stage  /sources/libgsm     /builds/ffdeps/libgsm

RUN     cp -r /builds/ffdeps/libgsm/inc /builds/ffmpeg/deps/include/gsm

RUN     cd /builds/ffdeps/libgsm                            \
    &&  make -j$(( ${JOBS} + 1 )) CC=${CCPREFIX}gcc         \
    &&  cp lib/libgsm.a /builds/ffmpeg/deps/lib/libgsm.a


COPY --from=fetch_stage /sources/opencore-amr-0.1.6 /builds/ffdeps/opencore-amr
COPY        deps/build/opencore-am/configure.ac /builds/ffdeps/opencore-amr/configure.ac

WORKDIR /builds/ffdeps/opencore-amr

RUN     cp -r /builds/ffdeps/opencore-amr/amrnb  /builds/ffmpeg/deps/include/opencore-amrnb         \
    &&  ./configure                                                                                 \
            --enable-static                                                                         \
            --host=riscv64-unknown-linux-gnu                                                        \
            --prefix=/builds/ffmpeg/deps                                                            \
        | tee -a /artifacts/tina/logs/build.opencore-amr                                            \
    &&  make -j$(( ${JOBS} + 1 )) install 2>&1 | tee -a /artifacts/tina/logs/build.opencore-amr     \
    \
    &&  mv /builds/ffmpeg/deps/lib/libopencore-amrnb.a /builds/ffmpeg/deps/lib/opencore-amrnb.a     \
    &&  mv /builds/ffmpeg/deps/lib/libopencore-amrwb.a /builds/ffmpeg/deps/lib/opencore-amrwb.a



FROM build_stage_ffdeps AS build_stage

WORKDIR /builds/ffmpeg

RUN     ./configure                                             \
            --disable-doc                                       \
            --disable-runtime-cpudetect                         \
            --disable-ffplay                                    \
            --disable-ffprobe                                   \
            --arch=riscv64                                      \
            --target-os=linux                                   \
            --cross-prefix=${CROSS_COMPILE}                     \
            --enable-gpl                                        \
            --enable-version3                                   \
            --enable-static                                     \
            --disable-shared                                    \
            --disable-libfdk_aac                                \
            --enable-libvpx                                     \
            --enable-libx264                                    \
            --enable-libx265                                    \
            --enable-nonfree                                    \
            --enable-libopencore-amrnb                          \
            --enable-libopencore-amrwb                          \
            --enable-libgsm                                     \
            --enable-libxvid                                    \
            --extra-ldflags=-L/builds/ffmpeg/deps/lib           \
            --extra-cflags=-I/builds/ffmpeg/deps/include        \
            --extra-cxxflags=-I/builds/ffmpeg/include           \
    &&  make -j$(( ${JOBS} + 1)) \
    || return 0
    # && :

# RUN     mkdir -p /artifacts/ffmpeg                              \
#     &&  cp /builds/ffmpeg/ffmpeg    /artifacts/ffmpeg/ffmpeg    \
#     &&  cp /builds/ffmpeg/ffmpeg_g  /artifacts/ffmpeg/ffmpeg_g  \
#     &&  cp /builds/ffmpeg/ffprobe   /artifacts/ffmpeg/ffprobe   \
#     &&  cp /builds/ffmpeg/ffprobe_g /artifacts/ffmpeg/ffprobe_g


FROM build_stage AS disk_stage

WORKDIR /builds/linux-tina

ENV ROOTFS_DIR=/builds/linux-tina/out/d1-mq_pro/compile_dir/target/rootfs

RUN     cp /artifacts/mediamtx      ${ROOTFS_DIR}/bin/mediamtx
ADD     deps/rootfs/mediamtx.yml    ${ROOTFS_DIR}/etc/mediamtx.yml

# TODO: copy ffmpeg

# TODO: copy init script

RUN     /bin/bash -c "                                  \
                source build/envsetup.sh                \
            &&  lunch d1_mq_pro-tina                    \
            &&  mkrootfs_squashfs4                      \
            &&  muboot                                  \
            &&  pack                                    \
        " 2>&1 | tee /artifacts/tina/logs/build.muboot

RUN     mkdir -p /artifacts/tina/u-boot/ /artifacts/tina/dts /artifacts/tina/out
RUN     cp /builds/linux-tina/lichee/linux-5.4/arch/riscv/boot/dts/sunxi/*?.dt*? /artifacts/tina/dts/
RUN     cp /builds/linux-tina/out/d1-mq_pro/*?.img /artifacts/tina/out/
RUN     cp /builds/linux-tina/lichee/brandy-2.0/u-boot-2018/u-boot*? /artifacts/tina/u-boot/


FROM ubuntu:22.04 AS run_stage

WORKDIR /doorbellian

RUN     apt-get update              \
    &&  apt-get install -y          \
            qemu-system-riscv64     \
            v4l-utils               \
            usbutils


ADD deps/run/doorbellian-qemu.sh doorbellian-qemu.sh
RUN chmod +x doorbellian-qemu.sh

COPY --from=disk_stage /artifacts                                          /artifacts

# CMD ["/doorbellian/doorbellian-qemu.sh"]
CMD ["/bin/bash"]
